dataMurderRates = read_delim("D:/Universidad/Ciclo7/AnalisisMultivariado/Evaluacion01/MurderRates.csv",
",", escape_double = FALSE, trim_ws = TRUE) #insertar datos separados por ,
library(beeswarm)
library(dplyr)
library(readr)
library(tidyr)
library(readxl)
library(ggplot2)
library(stringr)
dataMurderRates = read_delim("D:/Universidad/Ciclo7/AnalisisMultivariado/Evaluacion01/MurderRates.csv",
",", escape_double = FALSE, trim_ws = TRUE) #insertar datos separados por ,
View(dataMurderRates)
library(beeswarm)
library(dplyr)
library(readr)
library(tidyr)
library(readxl)
library(ggplot2)
library(stringr)
library(readr)
library(corrplot)
library(RColorBrewer) #para definir colores
str(dataMurderRates) #ver que tipo de variable son las columnas
murderrates_numeric <- dataMurderRates[, sapply(dataMurderRates, is.numeric)] #excluir caracteres y solo admitir
my_colors <- colorRampPalette(c("red", "white", "violet"))(200) #definimos los colores
M <- cor(murderrates_numeric)
corrplot(M, method = "ellipse", col = my_colors) # Elipse
corrplot(M, method = "number", col = my_colors) # Elipse
library(beeswarm)
library(dplyr)
library(readr)
library(tidyr)
library(readxl)
library(ggplot2)
library(stringr)
library(corrplot)
library(RColorBrewer) #para definir colores
dataMurderRates = read_delim("D:/Universidad/Ciclo7/AnalisisMultivariado/Evaluacion01/MurderRates.csv",
",", escape_double = FALSE, trim_ws = TRUE) #insertar datos separados por ,
View(dataMurderRates)
dim(dataMurderRates) #mostrar filas y columnas
str(dataMurderRates) #tipo de variable del dato
names(dataMurderRates) #nombres de las variables
summary(dataMurderRates) #descripción de los datos
View(dataMurderRates)
install.packages("AER")
str(dataMurderRates) #tipo de variable del dato
summary(dataMurderRates) #descripción de los datos
attach(dataMurderRates)
mean(rate)
library(AER)
mean(rate)
attach(dataMurderRates)
mean(rate)
summary(rate)
hist(rate)
hist(rate, freq = FALSE)
hist(rate, freq = FALSE)
library(PerformanceAnalytics)
pairs(rate~noncauc, col="blue")
df = data.frame(peso,largo)
df = data.frame(peso,largo)
peso=c(51,59,49,54,50,55,48,53,52,57)
largo =c(33.5,38,32,37.5,31.5,33,31,36.5,34,35)
df = data.frame(peso,largo)
chart.Correlation(df)
df = data.frame(rate,noncauc)
chart.Correlation(df)
shapiro.test(rate)
shapiro.test(noncauc)
shapiro.test(rate)
shapiro.test(noncauc)
shapiro.test(peso)
pairs(largo~peso, col="blue")
df = data.frame(peso,largo)
chart.Correlation(df)
pairs(rate~noncauc, col="blue")
df = data.frame(rate,noncauc)
chart.Correlation(df)
cor(rate, noncauc)#valor de correlacion
cor.test(rate,noncauc)
str(dataMurderRates) #ver que tipo de variable son las columnas
murderrates_numeric <- dataMurderRates[, sapply(dataMurderRates, is.numeric)] #excluir caracteres y solo admitir
my_colors <- colorRampPalette(c("red", "white", "violet"))(200) #definimos los colores
M <- cor(murderrates_numeric)
corrplot(M, method = "number", col = my_colors) # Elipse
corrplot(M, method = "Elipse", col = my_colors) # Elipse
corrplot(M, method = "ellipse", col = my_colors) # Elipse
corrplot(M, method = "number", col = my_colors) # Elipse
my_colors <- colorRampPalette(c("red", "black", "violet"))(200) #definimos los colores
M <- cor(murderrates_numeric)
my_colors <- colorRampPalette(c("red", "black", "violet"))(200) #definimos los colores
M <- cor(murderrates_numeric)
corrplot(M, method = "number", col = my_colors) # Elipse
EA = c(2, 3, 1, 4, 2, 3, 2, 1, 3, 2)
EB = c(3, 2, 1, 3, 2, 2, 4, 2, 3, 1)
boxplot(EA, EB, names=c("EA", "EB"))
medias = c(mean(EA),mean(EB))
points(medias,pch=18,col="purple")
boxplot(rate, noncauc, names=c("rate", "noncauc"))
medias = c(mean(EA),mean(EB))
points(medias,pch=18,col="purple")
boxplot(rate, convictions, names=c("rate", "noncauc"))
boxplot(rate, convictions, names=c("rate", "noncauc"))
medias = c(mean(EA),mean(EB))
points(medias,pch=18,col="purple")
boxplot(rate, convictions, names=c("rate", "convictions"))
boxplot(rate, executions, names=c("rate", "convictions"))
par(mar = c(2, 2, 2, 2))
par(mfrow = c(1, 2))
qqnorm(EA, xlab = "", ylab = "", main = "EA")
qqline(EA)
qqnorm(EB, xlab = "", ylab = "", main = "EB")
qqline(EB)
par(mar = c(2, 2, 2, 2))
par(mfrow = c(1, 2))
qqnorm(rate, xlab = "", ylab = "", main = "EA")
qqline(rate)
qqnorm(executions, xlab = "", ylab = "", main = "EB")
qqline(executions)
t.test(rate, executions, paired = FALSE)
partidos_nombre = c('estado', 'tasa', 'condena', 'ejecucion', 'tiempo', 'ingreso',
'lfp', 'nocaucas', 'sur')
cambiar_nombre = c('estado', 'tasa', 'condena', 'ejecucion', 'tiempo', 'ingreso',
'lfp', 'nocaucas', 'sur')
partidos_nombre = c('pase18', 'pac18', 'adc18', 'pt18', 'fa18', 'pin18',
'pln18', 'pml18', 'png18', 'prc18', 'prsc18', 'prn18', 'pusc18')
resultados2014 = read_delim("D:/Universidad/Ciclo7/AnalisisMultivariado/análisis-multivariado/sesion01/data/resultados2014.csv",
",", escape_double = FALSE, trim_ws = TRUE) #insertar datos separados por ,
head(resultados2014) #mostrar datos de resultados2014
cam_nombre = function(dataframe){
for (i in 1:length(partidos_nombre)){
names(dataframe)[names(dataframe) == paste0('votos', i)] =
partidos_nombre[i]
}
return(dataframe)
}
resultados2018 = cam_nombre(resultados2018) #ejecutar funcion
resultados2018 = read_delim("D:/Universidad/Ciclo7/AnalisisMultivariado/análisis-multivariado/sesion01/data/resultados2018.csv",
",", escape_double = FALSE, trim_ws = TRUE) #insertar datos separados por ,
cam_nombre = function(dataframe){
for (i in 1:length(partidos_nombre)){
names(dataframe)[names(dataframe) == paste0('votos', i)] =
partidos_nombre[i]
}
return(dataframe)
}
resultados2018 = cam_nombre(resultados2018) #ejecutar funcion
head(resultados2018, 5) # ver el resultado del cambio de nombre
# Definir la función para cambiar nombres de columnas
cam_nombre = function(dataframe) {
# Asegurarse de que el número de nombres nuevos coincida con el número de columnas en el dataframe
if(length(cambiar_nombre) != ncol(dataframe)) {
stop("El número de nombres proporcionados no coincide con el número de columnas en el dataframe.")
}
# Cambiar los nombres de las columnas del dataframe
names(dataframe) <- cambiar_nombre
return(dataframe)
}
df_modificado <- cam_nombre(df)
cam_nombre = function(dataframe) {
# Asegurarse de que el número de nombres nuevos coincida con el número de columnas en el dataframe
# Cambiar los nombres de las columnas del dataframe
names(dataframe) <- cambiar_nombre
return(dataframe)
}
df_modificado <- cam_nombre(df)
dataMurderRates = read_delim("D:/Universidad/Ciclo7/AnalisisMultivariado/Evaluacion01/MurderRates.csv",
",", escape_double = FALSE, trim_ws = TRUE) #insertar datos separados por ,
dim(dataMurderRates) #mostrar filas y columnas
pairs(rate~noncauc, col="blue")
df = data.frame(rate,noncauc)
chart.Correlation(df)
pairs(rate~noncauc, col="blue")
df <- data.frame(rate = rate, noncauc = noncauc, income = income, lfp = lfp, southern = southern)
# Convertir southern a un factor si aún no lo es
df$southern <- as.factor(df$southern)
# Crear el gráfico de pares
pairs(~ rate + noncauc + income + lfp + southern, data = df, col = "blue")
df2 = data.frame(rate = rate, noncauc = noncauc)
chart.Correlation(df2, histogram = TRUE, pch = 19)
shapiro.test(rate)
shapiro.test(noncauc)
