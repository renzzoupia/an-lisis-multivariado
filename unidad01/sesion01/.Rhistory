library(beeswarm)
library(dplyr)
library(readr)
library(tidyr)
library(readxl)
library(ggplot2)
library(stringr)
library(dplyr)
resultados2014 = read_delim("D:/Universidad/Ciclo7/AnalisisMultivariado/análisis-multivariado/sesion01/data/resultados2014.csv",
",", escape_double = FALSE, trim_ws = TRUE) #insertar datos separados por ,
resultados2018 = read_delim("D:/Universidad/Ciclo7/AnalisisMultivariado/análisis-multivariado/sesion01/data/resultados2018.csv",
",", escape_double = FALSE, trim_ws = TRUE) #insertar datos separados por ,
partidos_nombre = c('pase18', 'pac18', 'adc18', 'pt18', 'fa18', 'pin18',
'pln18', 'pml18', 'png18', 'prc18', 'prsc18', 'prn18', 'pusc18')
cam_nombre = function(dataframe){
for (i in 1:length(partidos_nombre)){
names(dataframe)[names(dataframe) == paste0('votos', i)] =
partidos_nombre[i]
}
return(dataframe)
}
resultados2018 = cam_nombre(resultados2018) #ejecutar funcion
head(resultados2018, 5) # ver el resultado del cambio de nomb
cam_nombre = function(dataframe){
for (i in 1:length(partidos_nombre)){
names(dataframe)[names(dataframe) == paste0('votos', i)] =
partidos_nombre[i]
}
return(dataframe)
}
head(resultados2018, 5) # ver el resultado del cambio de nombre
votos_porcentaje = function(dataframe){
x = dataframe%>%
group_by(codigo)%>%
mutate_all(funs((. / votos_validos)*100))%>%
select(-votos_validos)
return(x)
}
resultados2014_porcen = votos_porcentaje(resultados2014)
resultados2018_porcen = votos_porcentaje(resultados2018)
head(resultados2014_porcen)
head(resultados2018_porcen)
resultados2014_porcen = resultados2014 %>%
group_by(codigo) %>%
mutate_all(list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)))
head(resultados2014_porcen)
resultados2014_porcen = votos_porcentaje(resultados2014)
head(resultados2014_porcen)
resultados2014_porcen = resultados2014 %>%
group_by(codigo) %>%
mutate_all(list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)))
head(resultados2014_porcen)
resultados2014_porcen = votos_porcentaje(resultados2014)
resultados2018_porcen = votos_porcentaje(resultados2018)
winner = function(dataframe, periodo){
x = dataframe%>%
gather(partido, votos, -codigo) %>%
group_by(codigo)%>%
filter(votos==max(votos))%>%
separate(partido, c(paste0("partido", periodo)),
sep="1")%>%
select(-votos)
return(x)
}
winner2014=winner(resultados2014_porcen, 14)
winner2018 =winner(resultados2018_porcen, 18)
table(winner2014$partido14)
table(winner2018$partido18)
cambio = winner2018%>%
left_join(winner2014, by="codigo")%>%
mutate(cambio=ifelse(partido18==partido14,"sin
cambio", "cambio"),
robo=ifelse(cambio=="cambio",
paste(partido18, partido14, sep=" al "), "sin cambio"))
table(cambio$cambio)
table(cambio$robo)
grafico_votos = function(partido, color){
x = resultados2018_porcen%>%
select(codigo, paste0(partido,18))%>%
left_join(
(resultados2014_porcen%>%
select(codigo, paste0(partido,14))),
by="codigo")%>%
gather(anio, votos, - codigo)%>%
mutate(anio=ifelse(anio==paste0(partido,14), 2014, 2018))
par(las=1, bty="l", family="mono", font=1, bg="transparent")
return(
beeswarm(votos ~ anio, data=x, col=color, pch=16, method="hex",
cex=0.8, horizontal=TRUE, ylab="", xlab=paste("Porcentaje de votos del", toupper(partido)),
main=paste("Porcentaje de votos del", toupper(partido)), xlim=c(0, 60))
)
}
grafico_votos("pac", "#BE0000")
grafico_votos("pac", "blue")
grafico_votos("prn", "blue")
winner = function(dataframe, periodo){
x = dataframe%>%
gather(partido, votos, -codigo) %>%
group_by(codigo)%>%
filter(votos==max(votos))%>%
separate(partido, c(paste0("partido", periodo)),
sep="1")%>%
select(-votos)
return(x)
}
winner2014=winner(resultados2014_porcen, 14)
winner2018 =winner(resultados2018_porcen, 18)
head(winner2014)
head(winner2018)
head(winner2018)
table(winner2014$partido14)
table(winner2014)
table(winner2014$partido14)
table(winner2018$partido18)
cambio = winner2018%>%
left_join(winner2014, by="codigo")%>%
mutate(cambio=ifelse(partido18==partido14,"sin
cambio", "cambio"),
robo=ifelse(cambio=="cambio",
paste(partido18, partido14, sep=" al "), "sin cambio"))
table(cambio$cambio)
table(cambio$robo)
table(cambio$cambio)
table(cambio$robo)
grafico_votos = function(partido, color){
x = resultados2018_porcen%>%
select(codigo, paste0(partido,18))%>%
left_join(
(resultados2014_porcen%>%
select(codigo, paste0(partido,14))),
by="codigo")%>%
gather(anio, votos, - codigo)%>%
mutate(anio=ifelse(anio==paste0(partido,14), 2014, 2018))
par(las=1, bty="l", family="mono", font=1, bg="transparent")
return(
beeswarm(votos ~ anio, data=x, col=color, pch=16, method="hex",
cex=0.8, horizontal=TRUE, ylab="", xlab=paste("Porcentaje de votos del", toupper(partido)),
main=paste("Porcentaje de votos del", toupper(partido)), xlim=c(0, 60))
)
}
grafico_votos("pln", "blue")
grafico_votos("ppusc", "blue")
grafico_votos("pusc", "blue")
grafico_votos("pac", "blue")
grafico_votos("prn", "blue")
grafico_votos("ppin", "blue")
grafico_votos("pin", "blue")
grafico_votos("pusc", "red")
grafico_votos("pac", "green")
grafico_votos("prn", "pink")
grafico_votos("pin", "violet")
grafico_votos("prn", "pink")
cantones= resultados2018%>%
filter(codigo==101 | codigo==103 |codigo==119|codigo==201|codigo==210|codigo==301)
sum(cantones$votos_validos)/sum(resultados2018$votos_validos)*100
resultados2018_porcen%>%
filter(codigo==101 | codigo==103 |codigo==119|codigo==201|codigo==210|codigo==301)%>%
gather(partido, votos, -codigo)%>%
group_by(codigo)%>%
filter(votos==max(votos))
library("gpclib")
library("raster")
library("maptools")
library(rlang)
library("broom")
library(mapproj)
library("broom")
library("broom")
library(mapproj)
library("sf")
library("raster")
library("ggplot2")
library("readxl")
library("dplyr")
codigohasc = read_excel("D:/Universidad/Ciclo7/AnalisisMultivariado/análisis-multivariado/sesion01/data/codigohasc2.xlsx")
mapa14 = left_join(resultados2014_porcen, codigohasc, by="codigo")
mapa18 = left_join(resultados2018_porcen, codigohasc, by="codigo")
cr = getData("GADM", country = "CRI", level = 2)
cr2 = st_as_sf(cr)
mapa_resultados = function(dataframe_mapa, partido, color_high, titulo)
{
# Unir bases
cr_mapa = full_join(cr2, dataframe_mapa, by=c("HASC_2"="HASC")) %>%
arrange(desc(order))
return(
ggplot() +
geom_sf(data = cr_mapa, aes(fill = {{partido}}), color = "white") +
coord_sf() +
scale_fill_gradient(low = "#E0E0E0", high = color_high, limits = c(0, 70)) +
labs(x = NULL,
y = NULL,
title = titulo) +
theme_void()
)
}
mapa_resultados(mapa14, pln14, "#219B63", "PLN 2014")
library(geojsonsf)
install.packages("geojsonsf")
library(geojsonsf)
mapa_resultados(mapa14, pln14, "#219B63", "PLN 2014")
####MAPAS
library("sf")
mapa14 = left_join(resultados2014_porcen, codigohasc, by="codigo")
mapa18 = left_join(resultados2018_porcen, codigohasc, by="codigo")
cr = getData("GADM", country = "CRI", level = 2)
cr2 = st_as_sf(cr)
mapa_resultados = function(dataframe_mapa, partido, color_high, titulo){
# Unir bases
cr_mapa = full_join(cr2, dataframe_mapa, by=c("HASC_2"="HASC")) %>%
arrange(desc(order))
return(
ggplot() +
geom_sf(data = cr_mapa, aes(fill = {{partido}}), color = "white") +
coord_sf() +
scale_fill_gradient(low = "#E0E0E0", high = color_high, limits = c(0, 70)) +
labs(x = NULL,
y = NULL,
title = titulo) +
theme_void()
)
}
mapa_resultados(mapa14, pac14, "#219B63", "PLN 2014")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
mapa_resultados(mapa14, pln14, "#219B63", "PLN 2014")
rlang::last_trace()
print(class(cr))
cr2 = st_as_sf(cr)
mapa_resultados(mapa14, pln14, "#219B63", "PLN 2014")
rlang::last_trace()
mapa_resultados <- function(dataframe_mapa, partido, color_high, titulo) {
# Unir los datos
cr_mapa = full_join(cr_sf, dataframe_mapa, by = c("HASC_2" = "HASC"))
# Revisar las columnas disponibles
print(names(cr_mapa))
# Asegurarse de que 'order' (o el nombre de la columna correcta) está disponible
if ("order" %in% names(cr_mapa)) {
cr_mapa = arrange(cr_mapa, desc(order))
} else {
# Si 'order' no está disponible, elige otra columna o emite una advertencia
warning("Columna 'order' no encontrada, ajusta el código de ordenamiento.")
}
# Generar el mapa
return(
ggplot() +
geom_sf(data = cr_mapa, aes(fill = {{ partido }}), color = "white") +
coord_sf() +
scale_fill_gradient(low = "#E0E0E0", high = color_high, limits = c(0, 70)) +
labs(x = NULL, y = NULL, title = titulo) +
theme_void()
)
}
mapa_resultados(mapa14, pln14, "#219B63", "PLN 2014")
cr_sf = st_as_sf(cr)
mapa_resultados <- function(dataframe_mapa, partido, color_high, titulo) {
# Unir los datos
cr_mapa = full_join(cr_sf, dataframe_mapa, by = c("HASC_2" = "HASC"))
# Revisar las columnas disponibles
print(names(cr_mapa))
# Asegurarse de que 'order' (o el nombre de la columna correcta) está disponible
if ("order" %in% names(cr_mapa)) {
cr_mapa = arrange(cr_mapa, desc(order))
} else {
# Si 'order' no está disponible, elige otra columna o emite una advertencia
warning("Columna 'order' no encontrada, ajusta el código de ordenamiento.")
}
# Generar el mapa
return(
ggplot() +
geom_sf(data = cr_mapa, aes(fill = {{ partido }}), color = "white") +
coord_sf() +
scale_fill_gradient(low = "#E0E0E0", high = color_high, limits = c(0, 70)) +
labs(x = NULL, y = NULL, title = titulo) +
theme_void()
)
}
mapa_resultados(mapa14, pln14, "#219B63", "PLN 2014")
mapa_resultados(mapa14, pln14, "#219B63", "PLN 2014")
mapa_resultados(mapa18, pln18, "#219B63", "PLN 2018")
mapa_resultados(mapa14, pln14, "blue", "PLN 2014")
mapa_resultados(mapa14, pln14, "blue", "PLN 2014")
grafico_votos("pln", "blue")
library(beeswarm)
library(dplyr)
library(readr)
library(tidyr)
library(readxl)
library(ggplot2)
library(stringr)
grafico_votos("pln", "blue")
resultados2018 = cam_nombre(resultados2018) #ejecutar funcion
head(resultados2018, 5) # ver el resultado del cambio de nombre
votos_porcentaje = function(dataframe){
x = dataframe%>%
group_by(codigo)%>%
mutate_all(funs((. / votos_validos)*100))%>%
select(-votos_validos)
return(x)
}
resultados2014_porcen = votos_porcentaje(resultados2014)
mapa_resultados <- function(dataframe_mapa, partido, color_high, titulo) {
# Unir los datos
cr_mapa = full_join(cr_sf, dataframe_mapa, by = c("HASC_2" = "HASC"))%>%
arrange(desc(order))
# Revisar las columnas disponibles
print(names(cr_mapa))
# Asegurarse de que 'order' (o el nombre de la columna correcta) está disponible
if ("order" %in% names(cr_mapa)) {
cr_mapa = arrange(cr_mapa, desc(order))
} else {
# Si 'order' no está disponible, elige otra columna o emite una advertencia
warning("Columna 'order' no encontrada, ajusta el código de ordenamiento.")
}
# Generar el mapa
return(
ggplot() +
geom_sf(data = cr_mapa, aes(fill = {{ partido }}), color = "white") +
coord_sf() +
scale_fill_gradient(low = "#E0E0E0", high = color_high, limits = c(0, 70)) +
labs(x = NULL, y = NULL, title = titulo) +
theme_void()
)
}
mapa_resultados(mapa14, pln14, "blue", "PLN 2014")
mapa_resultados <- function(dataframe_mapa, partido, color_high, titulo) {
# Unir los datos
cr_mapa = full_join(cr_sf, dataframe_mapa, by = c("HASC_2" = "HASC"))
# Revisar las columnas disponibles
print(names(cr_mapa))
# Asegurarse de que 'order' (o el nombre de la columna correcta) está disponible
if ("order" %in% names(cr_mapa)) {
cr_mapa = arrange(cr_mapa, desc(order))
} else {
# Si 'order' no está disponible, elige otra columna o emite una advertencia
warning("Columna 'order' no encontrada, ajusta el código de ordenamiento.")
}
# Generar el mapa
return(
ggplot() +
geom_sf(data = cr_mapa, aes(fill = {{ partido }}), color = "white") +
coord_sf() +
scale_fill_gradient(low = "#E0E0E0", high = color_high, limits = c(0, 70)) +
labs(x = NULL, y = NULL, title = titulo) +
theme_void()
)
}
mapa_resultados(mapa14, pln14, "blue", "PLN 2014")
grafico_votos("pac", "blue")
votos_porcentaje = function(dataframe){
x = dataframe%>%
group_by(codigo)%>%
mutate_all(funs((. / votos_validos)*100))%>%
select(-votos_validos)
return(x)
}
resultados2014_porcen = votos_porcentaje(resultados2014)
resultados2014_porcen = resultados2014 %>% #Metodo para volver el porcentaje a normal
group_by(codigo) %>%
mutate_all(list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)))
resultados2018_porcen = resultados2018 %>%
group_by(codigo) %>%
mutate_all(list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)))
head(resultados2018_porcen)
resultados2014_porcen = votos_porcentaje(resultados2014)
grafico_votos("pac", "blue")
resultados2014_porcen = votos_porcentaje(resultados2014)
votos_porcentaje = function(dataframe){
x = dataframe%>%
group_by(codigo)%>%
mutate(across(everything(), ~(. / votos_validos) * 100)) %>%
select(-votos_validos)
return(x)
}
resultados2014_porcen = votos_porcentaje(resultados2014)
resultados2014_porcen = resultados2014 %>% #Metodo para volver el porcentaje a normal
group_by(codigo) %>%
mutate_all(list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)))
resultados2018_porcen = resultados2018 %>%
group_by(codigo) %>%
mutate_all(list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)))
winner = function(dataframe, periodo){
x = dataframe%>%
gather(partido, votos, -codigo) %>%
group_by(codigo)%>%
filter(votos==max(votos))%>%
separate(partido, c(paste0("partido", periodo)),
sep="1")%>%
select(-votos)
return(x)
}
winner2014=winner(resultados2014_porcen, 14)
library(data.table)
install.packages("data.table")
library(data.table)
votos_porcentaje = function(dataframe){
x = dataframe%>%
group_by(codigo)%>%
mutate_all(funs((. / votos_validos)*100))%>%
select(-votos_validos)
return(x)
}
resultados2014_porcen = votos_porcentaje(resultados2014)
mapa_resultados(mapa14, pln14, "blue", "PLN 2014")
table(winner2018$partido18)
table(cambio$cambio)
table(cambio$robo)
grafico_votos("pln", "blue")
library("gpclib")
gpclibPermit()
cantones= resultados2018%>%
filter(codigo==101 | codigo==103 |codigo==119|codigo==201|codigo==210|codigo==301)
sum(cantones$votos_validos)/sum(resultados2018$votos_validos)*100
resultados2018_porcen%>%
filter(codigo==101 | codigo==103 |codigo==119|codigo==201|codigo==210|codigo==301)%>%
gather(partido, votos, -codigo)%>%
group_by(codigo)%>%
filter(votos==max(votos))
